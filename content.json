{"meta":{"title":"MaxFan","subtitle":null,"description":null,"author":"Max Fan","url":"https://fan-max.github.io","root":"/"},"pages":[],"posts":[{"title":"GitHUB HEAD Pointer Introduction","slug":"write-this-on-2019-08-06","date":"2019-08-06T08:51:08.000Z","updated":"2019-08-06T08:57:46.397Z","comments":true,"path":"2019/08/06/write-this-on-2019-08-06/","link":"","permalink":"https://fan-max.github.io/2019/08/06/write-this-on-2019-08-06/","excerpt":"","text":"分离头指针============== 知识点 分离头指针 HEAD 含义 git diff 分离头指针 (Detached HEAD)有时候想尝试性修改某些内容（实验），也许并不会真的提交到分支，这时候可以使用分离头指针，修改的内容不会进入任何分支。 当修改内容的头指针没有与任何branch挂钩时，如果这时将头指针指向了某个分支（master），刚刚做的修改会被git当作垃圾废弃。 1234567891011121314$ max @ Maxs-MBP-2016 in ~/Develop/learnhtml on git:master o$ git checkout 5009f3a5f4Note: checking out '5009f3a5f4'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt;HEAD is now at 5009f3a Add index.html 修改README 文件（添加一行即可） 123456$ max @ Maxs-MBP-2016 in ~/Develop/learnhtml on git:5009f3a o$ lsREADME.md index.html$ max @ Maxs-MBP-2016 in ~/Develop/learnhtml on git:5009f3a o$ vim README.md 如果这时再将HEAD指向master，刚才做的修改会被废弃（可以进入gitk –all 查看） 12$ max @ Maxs-MBP-2016 in ~/Develop/learnhtml on git:5009f3a x$ git checkout master HEADHEAD归根到底其实还是指向了一个commit，并且可以指代那个commit git diffgit diff 用来比较两次commit的不同可以使用HEAD指代当前分支最后一次commit或者HEAD~1 , HEAD~2 分别表示倒数一次，倒数二次 1234$ max @ Maxs-MBP-2016 in ~/Develop/learnhtml on git:master x$ Git diff a8a599a4dd07 0434ef25597$ Git diff HEAD HEAD~1$ Git diff HEAD HEAD~2","categories":[],"tags":[]},{"title":"Generate SSH Key To Access Linux Server","slug":"Generate-SSH-Key-To-Access-Linux-Server","date":"2019-05-31T14:32:29.000Z","updated":"2019-06-02T05:13:51.321Z","comments":true,"path":"2019/05/31/Generate-SSH-Key-To-Access-Linux-Server/","link":"","permalink":"https://fan-max.github.io/2019/05/31/Generate-SSH-Key-To-Access-Linux-Server/","excerpt":"","text":"To access GCP linux server without password, one way is to generate SSH key pair , upload public key to linux and then use private key to access it. here’s the steps Create a SSH Key Pair1$ ssh-keygen -t rsa -f ~/.ssh/ [KEY_FILENAME] -C [USERNAME] For example, if we want to create the keys named maxserverkey1 under path *~/.ssh/*, and we want to log in as user named maxfan we can use following command 1$ ssh-keygen -t rsa -f ~/.ssh/maxserverkey1 -C maxfan if it works, you can find two keys uner path ~/.ssh public key: maxserverkey1 private key: maxserverkey1.pub Upload the public key to GCP VMAnd we need to upload the public keys to server (VM) (find more detail from demo) Access VM with private keySo when we want to access the instance, we just need to use following command 1$ ssh [USER_NAME]@[SERVER_NAME] -i ~/.ssh/[KEY_FILENAME] Find the whole process : (it may take some time to load the gif ) If you are working on windows, you can also refer to this : generate SSHK key with putty","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-05-28T15:35:32.318Z","updated":"2019-05-31T16:17:56.568Z","comments":true,"path":"2019/05/28/hello-world/","link":"","permalink":"https://fan-max.github.io/2019/05/28/hello-world/","excerpt":"","text":"Welcome to myblogThis is the first one .","categories":[],"tags":[]}]}